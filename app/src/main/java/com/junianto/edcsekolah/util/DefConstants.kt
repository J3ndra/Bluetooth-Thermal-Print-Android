package com.junianto.edcsekolah.util

object DefConstants {
    const val MAX_APPNAME_LEN = 33 // AppName的最大长度
    const val ICC_EMV = 0 // emv卡座
    const val MAX_APP_NUM = 32 //应用列表最多可存储的应用数
    const val MAX_CAPK_NUM = 64 //认证公钥表最多可存储的公钥数
    const val MAX_CAPKREVOKE_NUM = 96 //认证公钥撤回列表的最大个数32*3
    const val PART_MATCH = 0x00 //ASI(部分匹配)
    const val FULL_MATCH = 0x01 //ASI(完全匹配)
    const val EMV_GET_POSENTRYMODE = 0
    const val EMV_GET_BATCHCAPTUREINFO = 1
    const val EMV_GET_ADVICESUPPORTINFO = 2
    const val PIN_PED = 0x00 // 内置
    const val PIN_PP = 0x01 // 外置
    const val TIMEOUT = -2 // 超时
    const val MCARDNO_MAX_LEN = 19 // 卡号的最大长度
    const val LAST_REC_LOG = -0x1
    const val RECORDLOG = "record" // 日志文件
    const val DUPFILE = "dup_file" // 冲正文件
    var LOG_SIZE = LogStrc().size()
    var TYPE_KER_ERR = 0
    var TYPE_KER_EMV = 1
    var TYPE_KER_PBOC = 2
    var TYPE_KER_PAYWAVE = 3
    var TYPE_KER_QPBOC = 4
    var TYPE_KER_AMEX = 5
    var TYPE_KER_DPAS = 6
    var TYPE_KER_PAYPASS = 7
    var TYPE_KER_JSPEEDY = 8

    //TState
    const val TSTATE_NORMAL = 0 //正常完成的
    const val TSTATE_ONLINE_FAIL = 1 //联机失败,不会出现在日志中
    const val TSTATE_CANCEL = 2 // 用户取消，不会出现在日志中
    const val TSTATE_VOID = 3 //被撤销
    const val TSTATE_ADJUST = 4 //被调整(但是不是被覆盖了)
    const val TSTATE_ARPC_ERR = 5 //emv外部认证时arpc错
    const val TSTATE_OFFLINE_DENIAL = 6 //脱机拒绝(emv)
    const val TSTATE_ONLINE_DENIAL = 7 //联机拒绝,脱机也拒绝，也不会出现在日志中
    const val TSTATE_ONLINE_FAIL_OFFAPPROVE = 8 //联机失败，脱机接受
    const val TSTATE_ADJUST_REPLACE = 9 //原交易被调整和覆盖了
    const val PEDICCARD = 0x01 //0x01:内置IC卡
    const val EXICCARD = 0x02 //外置IC卡
    const val PEDPICCCARD = 0x03 //内置PICC
    const val EXPICCCARD = 0x04 //外置PICC
    const val SMARTEXPICCRD = 0x05 //智能PICC
    const val TERMPARAMFILE = "TermParamFile" //参数信息
    const val CtrlPARAMFILE = "CtrlParamFile" //控制参数信息
    const val MASK_INCARDNO_HANDIN = 0x01 //手输卡号
    const val MASK_INCARDNO_MAGCARD = 0x02
    const val MASK_INCARDNO_ICC = 0x04
    const val MASK_INCARDNO_PICC = 0x08 //检测非接卡
    const val CARD_EMVFULL = 0x01 //插卡的时候就走完整流程
    const val CARD_EMVSIMPLE = 0x02 //插卡的时候就走简易流程
    const val LED_BLUE = 0X01 //led蓝灯
    const val LED_YELLOW = 0X02 //led黄灯
    const val LED_GREEN = 0X04 //led绿灯
    const val LED_RED = 0X08 //led红灯
    const val LED_ALL = 0X0F //四个灯
    const val RemoveCard = -1001
    const val Approved = -1002
    const val OnlineProc = -1003
    const val ComFail = -1004
    const val UseOtherIntrf = -1005
    const val WaveCardAgain = -1006
    const val ProcessingMsg = -1007
    const val InputPsdMsgErr = -1008
    const val ContactDetected = -1009
    const val MultiCard = -1010
    const val PICCOpenErr = -1011
    const val MsgUseICC = -1012
    const val MsgUseMag = -1013
    const val GetTrackError = -1014
    const val MagDetected = -1015
    const val MsgPICCStart = -1016
    const val MsgMsdNoSupport = -1017
    const val InputOnlinePin = -1018
    const val PICCTimeOut = -1019
    const val MSG_USER_CANCEL = 8
    const val MSG_TIMEOUT = 9
    const val MSG_CARD_DATA_ERROR = 10
    const val MSG_NOT_ACCEPTED = 11
    const val MSG_DECLINED = 12
    const val MSG_ICC_ERROR = 13
    const val MSG_ERROR_RESPONSE = 14
    const val MSG_FILE_ERROR = 15
    const val MSG_PIN_BLOCKED = 16
    const val MSG_UNKNOWN_ERROR = 17
    const val MSG_TERMINATED = 18
    const val MSG_REMOVE_CARD = 19
    const val MSG_SELECT_AGAIN = 20
    const val MSG_SELECT_APP = 21
    const val MSG_ENTER_AMOUNT = 22
    const val MSG_ENTER_CASHBACK = 23
    const val MSG_ENTER_PIN_ONLINE = 24
    const val MSG_ENTER_PIN = 25
    const val MSG_ENTER_PIN_AGAIN = 26
    const val MSG_LAST_CHANCE = 27
    const val MSG_VERIFY_ID = 28
    const val MSG_MATCH = 29
    const val MSG_NO_MATCH = 30
    const val MSG_SHENFENZHENG = 31
    const val MSG_JUNGUANZHENG = 32
    const val MSG_HUZHAO = 33
    const val MSG_RUJINGZHENG = 34
    const val MSG_LINSHISHENFENZHENG = 35
    const val MSG_QITAZHENGJIAN = 36
    const val MSG_CALL_YOUR_BANK = 37
    const val MSG_APPROVE = 38
    const val MSG_DECLINE = 39
    const val MSG_PAN = 40
    const val MSG_OPEN_SERIAL_ERROR = 41
    const val MSG_CHECKSUM_ERROR = 42
    const val MSG_USE_MAG = 43
    const val MSG_MAG_ERROR = 44
    const val MSG_RETRY = 45
    const val MSG_IC_CARD = 46
    const val MSG_USE_CHIP = 47
    const val MSG_ONLINE_FAILED = 48
    const val MSG_REFERRAL = 49

    /*****************返回的错误信息定义 */
    const val E_TRANS_FAIL = 2 //交易失败
    const val E_NO_TRANS = 3 //无交易
    const val E_MAKE_PACKET = 4 //打包错
    const val E_ERR_CONNECT = 5 //联接失败
    const val E_SEND_PACKET = 6 //发包错误
    const val E_RECV_PACKET = 7 //收包错误
    const val E_RESOLVE_PACKET = 8 //解包错误
    const val E_REVERSE_FAIL = 9 //冲正失败
    const val E_NO_OLD_TRANS = 10 //无原始交易
    const val E_TRANS_VOIDED = 11 //交易已被撤消
    const val E_ERR_SWIPE = 12 //刷卡错误
    const val E_MEM_ERR = 13 //文件操作失败
    const val E_PINPAD_KEY = 14 //密码键盘或者密钥出错
    const val E_FILE_OPEN = 15 //打开文件错
    const val E_FILE_SEEK = 16 //定位文件错
    const val E_FILE_READ = 17 //读文件错
    const val E_FILE_WRITE = 18 //写文件错
    const val E_CHECK_MAC_VALUE = 19 //收包MAC校验错
    const val E_TRANS_CANCEL = 20 //交易被取消
    const val E_MAC = 21 //Mac校验错误
    const val E_SYS = 22 //系统错误

    //public static final int  E_FAIL				23;		//交易失败
    const val E_REVTIMEOUT = 24 //接收超时
    const val E_RESPERR = 25 //返回码错误
    const val E_SAMEPACKET = 26 //原包返回银行未开机

    //NO_DISP定为出错显示的最大值，注意随时更改
    const val NO_DISP = 0xBB
    const val KEYIN_CARD = 0x01 //手输卡号
    const val SWIPED_CARD = 0x02
    const val INSERT_ICCARD = 0x05 //IC卡
    const val PAYPASS_ICCARD = 0x07 //非接快速消费
    const val PAYPASS_MAG = 0x91 //非接简易流程
    const val POS_SALE = 2 //1001消费
    const val POS_VOID = 7 //当日撤销
    const val POS_QUE = 8 //查余额
}